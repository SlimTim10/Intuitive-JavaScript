#+SETUPFILE: setup.org
#+TITLE: Arrays

* Arrays
What's more common than dealing with a single primitive value (like a number, boolean, or string), is dealing with a collection of values. That's where *arrays* come in. Arrays are values that are sort of like strings, but instead of holding a list of characters, they can hold a list of any values. If we have an array, we can deal with multiple values all at once. Arrays always have an order; just like writing down a list of groceries, there is an order (top to bottom), even if you don't care about it or use it.

** Create
To create an array is easy! We use square brackets to surround a bunch of values separated by commas, like so: ~[2, 3, 4, 5]~.

#+BEGIN_SRC js
console.log([2, 3, 4, 5]); // print the array
#+END_SRC

Naturally, an array itself is a value (even though it holds multiple values inside of it), so we can assign it to a variable.

#+BEGIN_SRC js
const evenNumbers = [2, 4, 6, 8, 10];
console.log(evenNumbers);
#+END_SRC

Of course, we don't have to limit ourselves to numbers. Any values work in arrays!

#+BEGIN_SRC js
const fruits = ['apple', 'banana', 'cherry'];
console.log(fruits);

const booleans = [true, false];
console.log(booleans);
#+END_SRC

We can also put different types of values in the same array, although it may not be commonly useful.

#+BEGIN_SRC js
const mix = [1, 2, 'apple', true, undefined, null, false, -1000];
console.log(mix);
#+END_SRC

We can even put arrays in arrays. This /is/ often useful!

#+BEGIN_SRC js
const matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
console.log(matrix);
#+END_SRC

** Index
Because an array is a list of values, we often need to get one element from that list. Like strings, we can get an element by its *index* number. Remember that index numbers start from 0, not 1.

#+BEGIN_SRC js
const fruits = ['apple', 'banana', 'cherry'];
console.log(fruits[0]); // apple
console.log(fruits[1]); // banana
console.log(fruits[2]); // cherry
#+END_SRC

This also works for nested arrays.

#+BEGIN_SRC js
const matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
console.log(matrix[1]); // [4, 5, 6]
console.log(matrix[1][0]); // 4
#+END_SRC

** Length
Also like strings, arrays have the *length* property.

#+BEGIN_SRC js
const empty = [];
console.log(empty.length); // 0

const little = [0];
console.log(little.length); // 1

const evenNumbers = [2, 4, 6, 8, 10];
console.log(evenNumbers.length); // 5

const fruits = ['apple', 'banana', 'cherry'];
console.log(fruits.length); // 3
console.log(fruits[fruits.length - 1]); // cherry

const matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];
console.log(matrix.length); // 3
console.log(matrix[matrix.length - 1]); // [7, 8, 9]
console.log(matrix[0].length); // 3 -- because the first row of the matrix is an array of 3 values
#+END_SRC

** Gotcha! Equality
Checking if two arrays are equal (i.e. the same values) is counter-intuitive in JavaScript. Let's look at an example.

#+BEGIN_SRC js
const numbers = [1, 2, 3];
const sameNumbers = [1, 2, 3];
console.log(numbers === numbers); // true
console.log(numbers === sameNumbers); // false!
#+END_SRC

What? How could this be false? The two arrays are clearly identical. It turns out that JavaScript's equality operator (~===~) is not actually checking equality when it comes to arrays. It's checking whether they are the same exact variable. The bottom line is, don't try to compare arrays with the equality operator (~===~). (If you need to check if two arrays are equal, use a library like [[https://underscorejs.org/#isEqual][Underscore.js]] or [[https://ramdajs.com/docs/#equals][Ramda]].)

** Methods
Let's look at some array methods we can get a lot of use out of.

*** includes()
The ~includes()~ method lets us check if a specific value is included in an array, returning true or false.

#+BEGIN_SRC js
const empty = [];
console.log(empty.includes(0)); // false

const little = [0];
console.log(little.includes(0)); // true
console.log(little.includes('anything')); // false

const evenNumbers = [2, 4, 6, 8, 10];
console.log(evenNumbers.includes(4)); // true
console.log(evenNumbers.includes(3)); // false

const fruits = ['apple', 'banana', 'cherry'];
console.log(fruits.includes('banana')); // true
console.log(fruits.includes('app')); // false
console.log(fruits.includes('Apple')); // false
console.log(fruits[0].includes('app')); // true -- using string includes()
console.log(fruits.includes('donut')); // false

const matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];
console.log(matrix.includes([1, 2, 3])); // false -- because of equality!
console.log(matrix[2].includes(9)); // true
#+END_SRC

*** slice()
The ~slice()~ method lets us grab just a portion of an array. The first argument is the index to start from. The optional second argument is the index to stop at (without the second argument, it goes until the end). It returns an array containing the elements between. It will always return an array, even if it's empty.

#+BEGIN_SRC js
const empty = [];
console.log(empty.slice(0)); // []

const little = [0];
console.log(little.slice(1)); // []

const evenNumbers = [2, 4, 6, 8, 10];
console.log(evenNumbers.slice(1)); // [4, 6, 8, 10]
console.log(evenNumbers.slice(2, 3)); // [6]

const fruits = ['apple', 'banana', 'cherry'];
console.log(fruits.slice(2)); // ['cherry']

const matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];
console.log(matrix.slice(1, 2)); // [[4, 5, 6]]
console.log(matrix.slice(1, 2)[0].slice(0, 1)); // [4]
#+END_SRC

*** sort()
It's often that we have a list of numbers, words, or other things that need to be sorted into order. The ~sort()~ method lets us do exactly that!

#+BEGIN_SRC js
const someNumbers = [3, 99, 0, -6, 10];
console.log(someNumbers.sort()); // [ -6, 0, 10, 3, 99 ]

const fruits = ['banana', 'cherry', 'fig', 'apple', 'date', 'elderberry'];
console.log(fruits.sort()); // [ 'apple', 'banana', 'cherry', 'date', 'elderberry', 'fig' ]
#+END_SRC

*** reverse()
We can use ~reverse()~ to reverse the order of an array.

#+BEGIN_SRC js
const someNumbers = [3, 99, 0, -6, 10];
console.log(someNumbers.reverse()); // [ 10, -6, 0, 99, 3 ]
console.log(someNumbers.sort().reverse()); // [ 99, 3, 10, 0, -6 ]

const fruits = ['banana', 'cherry', 'fig', 'apple', 'date', 'elderberry'];
console.log(fruits.sort().reverse()); // [ 'fig', 'elderberry', 'date', 'cherry', 'banana', 'apple' ]
#+END_SRC

** Gotcha! Sneaky methods
The ~sort()~ and ~reverse()~ methods do something sneaky that you probably didn't realize. They /change the original array/. That means, after using ~sort()~ or ~reverse()~ on an array, you no longer have the original order! You can't stop them from doing this, but being aware of it can help you track down tricky bugs caused by it.

#+BEGIN_SRC js
const someNumbers = [3, 99, 0, -6, 10];
console.log(someNumbers); // [ 3, 99, 0, -6, 10 ]
console.log(someNumbers.reverse()); // [ 10, -6, 0, 99, 3 ]
console.log(someNumbers); // [ 10, -6, 0, 99, 3 ] -- not the original order!
console.log(someNumbers.sort()); // [ -6, 0, 10, 3, 99 ]
console.log(someNumbers); // [ -6, 0, 10, 3, 99 ] -- updated again!
#+END_SRC

We can know that ~sort()~ behaves this way because the [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort][MDN documentation]] says it sorts the array /in place/.

** Adding to arrays
We have seen how we can extract a single element from an array using its index. And we can take a portion of an array using ~slice()~, ending up with fewer elements. But what if we want to add more elements to an array?

If we try to do something like the following, we won't end up with the array we want.

#+BEGIN_SRC js
const someNumbers = [1, 2, 3];
const moreNumbers = [someNumbers, 4, 5, 6];
console.log(moreNumbers); // [ [ 1, 2, 3 ], 4, 5, 6 ]
#+END_SRC

The array ~someNumbers~ is treated as a single value, put inside a new array, followed by the next few numbers.

We need to use some new syntax. The *spread* operator: ~...~ . We can spread out an array's elements as separate values.

#+BEGIN_SRC js
const someNumbers = [1, 2, 3];
const moreNumbers = [...someNumbers, 4, 5, 6];
console.log(moreNumbers); // [ 1, 2, 3, 4, 5, 6 ]
#+END_SRC

The spread operator can be used on any array. Adding arrays together becomes very easy.

#+BEGIN_SRC js
console.log([...[1, 2, 3], ...[4, 5, 6], ...['apple', 'banana', 'cherry']]); // [ 1, 2, 3, 4, 5, 6, 'apple', 'banana', 'cherry' ]

// Watch what happens without spread
console.log([ [1, 2, 3], [4, 5, 6], ['apple', 'banana', 'cherry'] ]); // [ [1, 2, 3], [4, 5, 6], ['apple', 'banana', 'cherry'] ]
#+END_SRC

Adding a new element to an array is easy now. We can even add it to the start or the end.

#+BEGIN_SRC js
const fruits = ['banana', 'cherry'];

const moreFruits = ['apple', ...fruits];
console.log(moreFruits); // [ 'apple', 'banana', 'cherry' ]

const evenMoreFruits = [...moreFruits, 'date'];
console.log(evenMoreFruits); // [ 'apple', 'banana', 'cherry', 'date' ]
#+END_SRC

With a bit of cleverness, we can even add an element somewhere in the middle!

#+BEGIN_SRC js
const someNumbers = [1, 2, 3, 5, 6, 7];
const moreNumbers = [...someNumbers.slice(0, 3), 4, ...someNumbers.slice(3)];
console.log(moreNumbers); // [ 1, 2, 3, 4, 5, 6, 7 ]
#+END_SRC

Or replace the first element.

#+BEGIN_SRC js
const someNumbers = [99, 2, 3, 4];
const betterNumbers = [1, ...someNumbers.slice(1)];
console.log(betterNumbers); // [ 1, 2, 3, 4 ]
#+END_SRC

In fact, the spread operator can be used to copy arrays so the ~sort()~ and ~reverse()~ gotcha doesn't affect us!

#+BEGIN_SRC js
const someNumbers = [3, 99, 0, -6, 10];
const fakeCopyNumbers = someNumbers; // not a real copy
const copyNumbers = [...someNumbers]; // exact copy of someNumbers

console.log(someNumbers); // [3, 99, 0, -6, 10] -- original order
console.log(someNumbers.sort()); // [ -6, 0, 10, 3, 99 ] -- sorted

console.log(someNumbers); // [ -6, 0, 10, 3, 99 ] -- not the original order!
console.log(fakeCopyNumbers); // [ -6, 0, 10, 3, 99 ] -- not the original order because it's a fake copy!
console.log(copyNumbers); // [3, 99, 0, -6, 10] -- still has the original order because it's a copy
#+END_SRC

The most common real-world uses of all this will be two things: adding an element to the end of an array, and adding two arrays together.

#+BEGIN_SRC js
const teachers = ['Alice', 'Bob', 'Carol'];
const newTeachers = [...teachers, 'Dave']; // add the new teacher Dave
console.log(newTeachers); // [ 'Alice', 'Bob', 'Carol', 'Dave' ]

const managers = ['Eve', 'Frank', 'Grace'];
const staff = [...newTeachers, ...managers]; // gather all staff together
console.log(staff);// [ 'Alice', 'Bob', 'Carol', 'Dave', 'Eve', 'Frank', 'Grace' ]
#+END_SRC

** Higher-order methods :noexport:
A function (or method) that takes in a function as one of its arguments is called a *higher-order function (or method)*. There are a few commonly used higher-order methods for arrays, for handling common patterns.

*** map()
The most commonly used of these is ~map()~. Like any array method, it operates on an array. What it does is takes in a function and returns a new array after having applied that function to each element. Because the function we provide to ~map()~ is meant to operate on each individual element of the array, we must define it as a function that takes one argument and returns a new value.

Let's say we have an array of numbers.

#+BEGIN_SRC js
const someNumbers = [3, 99, 0, -6, 10];
#+END_SRC

And we want to increase each number by 1. We can first define a function that takes in a single number and returns its value plus 1.

#+BEGIN_SRC js
const add1 = x => x + 1;
console.log(add1(5)); // 6
#+END_SRC

We can try using this function on an element of our array.

#+BEGIN_SRC js
console.log(add1(someNumbers[0])); // 4
#+END_SRC

If we want to apply the function to each element of our array, we could write it out the long way.

#+BEGIN_SRC js
console.log( [ add1(someNumbers[0]), add1(someNumbers[1]), add1(someNumbers[2]), add1(someNumbers[3]), add1(someNumbers[4]) ] ); // [4, 100, 1, -5, 11]
#+END_SRC

This works, but it requires us to know exactly how many element are in the array. And it would take a lot of code for a long array. Instead, we can use ~map()~.

#+BEGIN_SRC js
console.log(someNumbers.map(add1)); // [4, 100, 1, -5, 11]
#+END_SRC

In fact, we can skip defining the add1 function and just put it all in one line.

#+BEGIN_SRC js
console.log(someNumbers.map(x => x + 1)); // [4, 100, 1, -5, 11]
#+END_SRC

In general, whenever we have some array ~xs~ and some function ~f~ (that operates on a single element ~x~), using ~xs.map(f)~ gives us ~[f(xs[0]), f(xs[1]), f(xs[2]), ...]~.

Map is the method to use if we want to:
- start with an array,
- do the same thing to each element of the array,
- and end up with a new array of the same size

*** forEach()
The ~forEach()~ method is /exactly/ the same as ~map()~ except it doesn't return the new array. It still takes in a function to operate on each element of the array, it simply leaves it at that and doesn't return anything. This is used for when we want to perform some /action/ on each element instead of ending up with a new array. The most common example of an action would be ~console.log()~.

#+BEGIN_SRC js
const names = ['Alice', 'Bob', 'Carol'];
const sayHello = name => {
  console.log(`Hello, ${name}!`);
};
names.forEach(sayHello);
names.forEach(name => {
  console.log(`Hello, ${name}!`);
});
#+END_SRC

Notice that our function does not return anything. Even if it did, the return value wouldn't be used because ~forEach()~ won't keep track of it.

*** filter()
One of the less common, but still useful, higher-order array methods is ~filter()~. It also takes in a function to operate on each element of the array, except the function's job is to say whether to keep the element or not. After using ~filter()~, we end up with a new /filtered/ array that has only certain elements from the original array. Because we can only either keep an element or not, the given function should return a boolean value (true or false). The new array will only have the elements for which the function returned true.

#+BEGIN_SRC js
const someNumbers = [3, 1, 2, 5, 6, 9, 8];
const isEven = num => num % 2 === 0; // returns true if num is even, otherwise false
console.log(someNumbers.filter(isEven)); // [ 2, 6, 8 ]
#+END_SRC

*** reduce()


** Methods with strings :noexport:

* Exercises

#+BEGIN_HTML
<ul>
	<li><a href="07-arrays-exercises.js">View exercises</a></li>
	<li><a href="07-arrays-exercises.js" download type="application/octet-stream">Download exercises</a></li>
	<li><a href="07-arrays-solutions.js">View solutions</a></li>
	<li><a href="07-arrays-solutions.js" download type="application/octet-stream">Download solutions</a></li>
</ul>
#+END_HTML
